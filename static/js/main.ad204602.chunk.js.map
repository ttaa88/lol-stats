{"version":3,"sources":["LeagueApi.js","App.js","index.js"],"names":["apiConfig","riotRoot","apiKey","summonerApi","matchApi","formUrl","api","param","concat","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","matches","handleInput","bind","assertThisInitialized","getAccountId","summonerName","champions","loadChampion","items","loadItems","runes","loadRune","spells","loadSpells","json","JSON","parse","stringify","require","data","_arr","keys","_i","length","key","_arr2","_i2","name","forEach","d","slots","s","r","id","_arr3","_i3","e","target","value","setState","self","axios","method","header","Access-Control-Allow-Origin","Content-Type","url","then","response","getMatchList","accountId","catch","error","console","log","preventDefault","matchRow","slice","pid","getParticipantId","participantIdentities","participant","participants","details","matchId","duration","gameDuration","outcome","getMatchOutcome","teamId","summoner","championName","championId","getItems","stats","getRunes","spell1Id","spell2Id","kDA","kills","assists","deaths","cs","totalMinionsKilled","cspm","level","champLevel","moreMatches","toConsumableArray","push","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","getMatchDetails","gameId","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","player","participantId","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","teams","t","win","item0","item1","item2","item3","item4","item5","item6","filter","item","perk0","perk1","perk2","perk3","perk4","perk5","rune","react_default","a","createElement","Table_default","TableHead_default","TableRow_default","TableCell_default","align","TableBody_default","map","join","Math","round","className","type","title","placeholder","onChange","onClick","createTable","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ad204602.chunk.js","sourcesContent":["const apiConfig = {\r\n    riotRoot: \"https://na1.api.riotgames.com\",    \r\n    apiKey: \"RGAPI-80c4ccc1-1cd2-4a4a-905b-0d62da721736\"\r\n}\r\n\r\nconst summonerApi = {\r\n    byName: \"lol/summoner/v4/summoners/by-name\",\r\n}\r\n\r\nconst matchApi = {\r\n    byAccountId: \"lol/match/v4/matchlists/by-account\",\r\n    byMatchId: \"/lol/match/v4/matches\"\r\n}\r\n\r\nfunction formUrl(api, param){\r\n    return `${apiConfig.riotRoot}/${api}/${param}?api_key=${apiConfig.apiKey}`;\r\n}\r\n\r\nexport { apiConfig, summonerApi, formUrl, matchApi };","import React, { Component } from 'react';\nimport { summonerApi, formUrl, matchApi } from './LeagueApi';\nimport axios from 'axios';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { matches: [] };\n    this.handleInput = this.handleInput.bind(this);\n    this.getAccountId = this.getAccountId.bind(this);\n\n    this.summonerName = \"\";\n    this.champions = this.loadChampion();\n    this.items = this.loadItems();\n    this.runes = this.loadRune();\n    this.spells = this.loadSpells();\n  }\n\n  loadChampion(){\n    var json = JSON.parse(JSON.stringify(require(\"./static/champion.json\").data)); \n    var champions = {};\n    for (const key of Object.keys(json)) {\n      champions[json[key].key] = key;\n    }      \n    return champions;\n  }\n\n  loadItems(){\n    var json = JSON.parse(JSON.stringify(require(\"./static/item.json\").data)); \n    var items = {};\n    for (const key of Object.keys(json)) {\n      items[key] = json[key].name;\n    }      \n    return items;\n  }\n\n  loadRune(){\n    var runes = {};\n    var json = JSON.parse(JSON.stringify(require(\"./static/runesReforged.json\"))); \n    json.forEach(d => { \n      d.slots.forEach(s => { \n        s.runes.forEach(r => {\n          runes[r.id] = r.key;\n        })\n      })\n    })    \n    return runes;\n  }\n\n  loadSpells(){\n    var json = JSON.parse(JSON.stringify(require(\"./static/summoner.json\").data)); \n    var spells = {};\n    for (const key of Object.keys(json)) {\n      spells[json[key].key] = key;\n    }      \n    return spells;\n  }\n\n  handleInput(e) {\n    this.summonerName = e.target.value;\n  }\n\n  getAccountId(e) {\n    this.setState({matches: []});\n    if(this.summonerName){\n      var self = this;\n      axios({\n        method:'get',\n        header:{\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json'\n        },\n        url:formUrl(summonerApi.byName, self.summonerName)\n      })\n      .then( response => {\n        self.getMatchList(response.data.accountId)\n      })\n      .catch( error => {\n        console.log(error);\n      });\n    }\n    e.preventDefault();\n  }\n\n  getMatchList(accountId) {\n    var self = this;\n    axios({\n      method:'get',\n      url:formUrl(matchApi.byAccountId, accountId)\n    })\n    .then(response => {\n      self.matchRow(accountId, response.data.matches.slice(0, 10))\n    });\n  }\n\n  getMatchDetails(accountId, id){\n    var self = this;\n    axios({\n      method:'get',\n      url:formUrl(matchApi.byMatchId, id)\n    })\n    .then( response => {\n      var pid = self.getParticipantId(accountId, response.data.participantIdentities);\n      var participant = response.data.participants[pid-1];        \n      var details = {\n        matchId: id,\n        duration: response.data.gameDuration,\n        outcome: self.getMatchOutcome(participant.teamId, response.data),\n        summoner : self.summonerName,\n        accountId : accountId,\n        championName : self.champions[participant.championId],\n        items: self.getItems(participant.stats),\n        runes: self.getRunes(participant.stats),\n        spells: [self.spells[participant.spell1Id], self.spells[participant.spell2Id]],\n        kDA : (participant.stats.kills + participant.stats.assists)/participant.stats.deaths,\n        cs: participant.stats.totalMinionsKilled,\n        cspm : participant.stats.totalMinionsKilled/response.data.gameDuration*60,\n        level : participant.stats.champLevel\n      };\n      let moreMatches = [...self.state.matches];\n      moreMatches.push(details);\n      self.setState({ matches: moreMatches });\n    });\n  }\n\n  matchRow(accountId, data){\n    for (var d of data){\n      this.getMatchDetails(accountId, d.gameId);\n    }    \n  }\n\n  getParticipantId(accountId, data){\n    for (var d of data){\n      if (d.player.accountId === accountId) \n        return d.participantId;\n    }\n  }\n\n  getMatchOutcome(teamId, data){\n    for (var t of data.teams){\n      if (t.teamId === teamId) return t.win;\n    }\n  }\n\n  getItems(data){\n    var items = [\n      this.items[data.item0],\n      this.items[data.item1],\n      this.items[data.item2],\n      this.items[data.item3],\n      this.items[data.item4],\n      this.items[data.item5],\n      this.items[data.item6],\n    ]          \n    return items.filter(function(item){\n      return item !== undefined;\n    })\n  }\n\n  getRunes(data){\n    var runes = [\n      this.runes[data.perk0],\n      this.runes[data.perk1],\n      this.runes[data.perk2],\n      this.runes[data.perk3],\n      this.runes[data.perk4],\n      this.runes[data.perk5]\n    ]\n    return runes.filter(function(rune){\n      return rune !== undefined;\n    })\n  }\n\n  createTable(){\n    return (<Table>\n      <TableHead>\n        <TableRow>\n          <TableCell>Outcome</TableCell>\n          <TableCell align=\"right\">Summoner Name</TableCell>\n          <TableCell align=\"right\">Champion</TableCell>\n          <TableCell align=\"right\">Duration</TableCell>\n          <TableCell align=\"right\">Items</TableCell>\n          <TableCell align=\"right\">Runes</TableCell>\n          <TableCell align=\"right\">Summoner Spells</TableCell>\n          <TableCell align=\"right\">KDA</TableCell>\n          <TableCell align=\"right\">CS</TableCell>\n          <TableCell align=\"right\">CS Per Min</TableCell>\n          <TableCell align=\"right\">Level</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {this.state.matches.map(function(value) {\n          return <TableRow>\n              <TableCell>{value.outcome}</TableCell>\n              <TableCell align=\"right\">{value.summoner}</TableCell>\n              <TableCell align=\"right\">{value.championName}</TableCell>\n              <TableCell align=\"right\">{value.duration} seconds</TableCell>\n              <TableCell align=\"right\">{value.items.join(' | ')}</TableCell>\n              <TableCell align=\"right\">{value.runes.join(' | ')}</TableCell>\n              <TableCell align=\"right\">{value.spells.join(', ')}</TableCell>\n              <TableCell align=\"right\">{Math.round(value.kDA*100)/100}</TableCell>\n              <TableCell align=\"right\">{value.cs}</TableCell>\n              <TableCell align=\"right\">{Math.round(value.cspm*100)/100}</TableCell>\n              <TableCell align=\"right\">{value.level}</TableCell>\n            </TableRow>\n        })}\n      </TableBody>\n    </Table>);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n            League Stats\n        </header>\n          <div>\n            <input\n              type=\"text\"\n              title=\"Full Name\"\n              name=\"name\"\n              value={this.state.name}\n              placeholder=\"Enter your name\"\n              onChange={this.handleInput}\n            />\n            <button onClick={this.getAccountId}>Click!</button>\n          </div>    \n          {this.createTable()}      \n      </div>   \n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}